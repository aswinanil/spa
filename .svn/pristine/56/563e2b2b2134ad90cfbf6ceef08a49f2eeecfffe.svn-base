#pragma once

#include <string>
#include <vector>
#include <algorithm>
#include "TNode.h"

using namespace std;

typedef string NODE_TYPE;
typedef string LINK_TYPE;
typedef int INDEX;
typedef int STMT;

class AST {

public:
	enum Link_Type{parent, children, left, right};
	// Default constuctor
	AST();
	
	// Constructor
	AST(TNode root);

	// Method to get root node
	TNode getRoot();

	// Method to create TNODE
	INDEX createTNode(NODE_TYPE nodeType, STMT stmtNumber, CONSTANT nodeValue);

	// Method to link nodes
	// n1 is <LinkType> of n2
	// eg: if <LinkType> is left, n1 is left sibling of n2 
	// eg: if <LinkType> is parent, n1 is parent of n2
	void linkNode(TNode n1, TNode n2, LINK_TYPE LinkType);

	TNode getChild(TNode p, int number);

	TNode getNode(INDEX index);

	string getNodeType(TNode n);

	int getNoOfChild(TNode n);

	CONSTANT getNodeValue(TNode n);

	// Method to get all stmt number for a given node type
	vector<int> getAllStmtNumByType(NODE_TYPE nodeType);

	// Method to get all constants for answering constant queries 
	vector<CONSTANT> getAllConstant();

	// Method to match the node type
	bool isMatch(TNode n, NODE_TYPE nodeType);


	/************************************
	*       Methods for future use 
	************************************/

	// Method to get an array of index for the given node type in the whole AST
	vector<int> getAllByType(NODE_TYPE nodeType);

	TNode getStmtNode(STMT stmtNumber);
	TNode getControlStmt(STMT stmtNumber);

	// Method to get the whole AST data structure
	vector<TNode> getASTVector();
	
private:
	// data structure of AST
	vector<TNode> tree;

	// private method to calculate the index of the TNode in the AST
	INDEX indexOf(TNode n);

	// private method to convert the link type
	int getLinkType(string linkType);

	// private methods to convert nodetype to integer and vice versa
	int convertNodeTypeStringToInteger(NODE_TYPE NodeType);
	string convertNodeTypeIntegerToString(int nodeType);

	// private method to get the stmt number of a node
	STMT stmtOf(TNode n);
};