#include "evaluator.h"
#include <iostream>
#include "AbstractWrapper.h"
using namespace std;



evaluator::evaluator(void)
{
	

}


evaluator::~evaluator(void){

}

void evaluator::insertAST(AST* _ast){
	ast = _ast;
}
void evaluator::insertFollows(Follows* _follows){
	follows = _follows;
}
void evaluator::insertParent(Parent* _parent){
	parent = _parent;
}
void evaluator::insertUses(Uses* _uses){
	uses = _uses;
}
void evaluator::insertModifies(Modifies* _modifies){
	modifies = _modifies;
}
void evaluator::insertVarTable(VarTable* _varTable){
	varTable = _varTable;
}


vector<vector<string>> evaluator::evaluateQuery(queryTree* _queryTree){
	//vector<vector<string>> resultVector;
	vector<vector<string>> cywresultVector ;

	string _select = _queryTree->getSelect();

	string _selectType =  _queryTree->getSelectType();

	
	vector<vector<string>> results = getAllByType(_select ,_selectType,  _queryTree);
	
	if(_queryTree->getSuchThatQuerySize() > 0){
		 results = evaluate(results, _queryTree);
	}

	else if(_queryTree->getPatternQuerySize()  > 0){
		results = pattern(results, _queryTree);
	}

	return results;
}


vector<vector<string>> evaluator::evaluate(vector<vector<string>> _results ,queryTree* _queryTree){
	vector<string> suchThatQuery = _queryTree->getSuchThatQuery(0);
	if(suchThatQuery.at(0) == "Follows"){
		_results = evaluateFollows(_results , _queryTree);
	}
	else if(suchThatQuery.at(0) == "Follows*"){
		_results = evaluateFollowsStar(_results , _queryTree);
	}
	else if(suchThatQuery.at(0) == "Parent"){
		_results = evaluateParent(_results , _queryTree);
	}
	else if(suchThatQuery.at(0) == "Parent*"){
		_results = evaluateParentStar(_results , _queryTree);
	}
	else if(suchThatQuery.at(0) == "Uses"){
		_results = evaluateUses(_results , _queryTree);
	}
	else if(suchThatQuery.at(0) == "Modifies"){
		_results = evaluateModifies(_results , _queryTree);
	}

	return _results;
}


//follows()
vector<vector<string>> evaluator::evaluateFollows(vector<vector<string>> _possibleResults ,queryTree* _queryTree){
	vector<string> suchThatQuery = _queryTree->getSuchThatQuery(0);

	string typeLeft = suchThatQuery.at(2);
	string typeRight = suchThatQuery.at(4);
	string valueLeft = suchThatQuery.at(1);
	string valueRight = suchThatQuery.at(3);
	string select = _queryTree->getSelect();
	string selectType = _queryTree->getSelectType();
	vector<vector<string>> results;

	if(valueLeft==select && valueRight==select){
		//vector<vector<string>> allPossibleByType= getAllByType(selectType);	
		for(int i=0; i<_possibleResults.size(); i++){
			int value = atoi( _possibleResults.at(i).at(0).c_str() );
			if(follows->isFollows(value, value)){
				results.push_back(_possibleResults.at(i));
			}
		}
		return results;
	} 
	//select(s1, not_s1), s1 == select
	else if(valueLeft==select && valueRight!=select){
		//select(s2, "1")
		if(typeRight=="Integer"){
			int intValueRight = atoi(valueRight.c_str() );
			for(int i=0; i<_possibleResults.size(); i++){
				int value = atoi( _possibleResults.at(i).at(0).c_str() );
				if(follows->isFollows(value, intValueRight)){
					results.push_back(_possibleResults.at(i));
				}
			}
		}
		//selects(s1,a1)
		else{
			vector<vector<string>> allPossibleRight;
			if(typeRight == "_"){
				allPossibleRight= getAllByType(valueRight, "stmt",  _queryTree);
			}
			else{
				allPossibleRight= getAllByType(valueRight, typeRight,  _queryTree);
			}

			for(int i=0; i<_possibleResults.size(); i++){
				int value = atoi( _possibleResults.at(i).at(0).c_str() );
				for(int j=0; j<allPossibleRight.size(); j++){
					int intValueRight = atoi( allPossibleRight.at(j).at(0).c_str() );
					if(follows->isFollows(value, intValueRight)){
						results.push_back(_possibleResults.at(i));
						break;
					}
				}
			}
		}
		return results;
	} 
	//select(not_s1, s1), s1 == select
	else if(valueLeft!=select && valueRight==select){
		//select("1",s1)
		if(typeLeft=="Integer"){
			int intValueLeft = atoi(valueLeft.c_str() );
			for(int i=0; i<_possibleResults.size(); i++){
				int value = atoi( _possibleResults.at(i).at(0).c_str() );
				if(follows->isFollows(intValueLeft, value)){
					results.push_back(_possibleResults.at(i));
				}
			}
		}
		//selects(a1, s1)
		else{
			vector<vector<string>> allPossibleLeft;
			if(typeLeft == "_"){
				allPossibleLeft= getAllByType(valueLeft, "stmt",  _queryTree);
			}
			else{
				allPossibleLeft= getAllByType(valueLeft, typeLeft,  _queryTree);
			}
			

			if(AbstractWrapper::GlobalStop) {
				return results;
			}

			for(int i=0; i<_possibleResults.size(); i++){
				int value = atoi( _possibleResults.at(i).at(0).c_str() );
				for(int j=0; j<allPossibleLeft.size(); j++){
					int intValueLeft = atoi( allPossibleLeft.at(j).at(0).c_str() );
					if(follows->isFollows(intValueLeft, value)){
						results.push_back(_possibleResults.at(i));
						break;
					}
				}
			}
		}
		return results;
	} 
	//select(not s1, not s1)
	else if(valueLeft!=select && valueLeft!=select){
		//select("1", "1")
		if(typeLeft=="Integer" && typeRight=="Integer"){
			int intValueLeft = atoi( valueLeft.c_str() );
			int intValueRight = atoi( valueRight.c_str() );
			if(follows->isFollows(intValueLeft, intValueRight)){
				results = _possibleResults;
			}
		}
		//select("1", s2)
		else if (typeLeft=="Integer" && typeRight!="Integer"){
			int intValueLeft = atoi(valueLeft.c_str() );

			vector<vector<string>> allPossibleRight;
			if(typeRight == "_"){
				allPossibleRight= getAllByType(valueRight, "stmt",  _queryTree);
			}
			else{
				allPossibleRight= getAllByType(valueRight, typeRight,  _queryTree);
			}

			for(int i=0; i<allPossibleRight.size(); i++){
				int intValueRight = atoi( allPossibleRight.at(i).at(0).c_str() );
				if(follows->isFollows(intValueLeft, intValueRight)){
					results = _possibleResults;
					break;
				}
			}
		}
		//select(s2, "1")
		else if (typeLeft!="Integer" && typeRight=="Integer"){
			int intValueRight = atoi(valueRight.c_str() );
			vector<vector<string>> allPossibleLeft;
			if(typeLeft == "_"){
				allPossibleLeft= getAllByType(valueLeft, "stmt",  _queryTree);
			}
			else{
				allPossibleLeft= getAllByType(valueLeft, typeLeft,  _queryTree);
			}


			for(int i=0; i<allPossibleLeft.size(); i++){
				int intValueLeft = atoi( allPossibleLeft.at(i).at(0).c_str() );
				if(follows->isFollows(intValueLeft, intValueRight)){
					results = _possibleResults;
					break;
				}
			}
		}
		//select(s2, "1")
		else if (typeLeft!="Integer" && typeRight!="Integer"){
			vector<vector<string>> allPossibleLeft;
			
			//get all left
			if(typeLeft == "_"){
				allPossibleLeft= getAllByType(valueLeft, "stmt",  _queryTree);
			}
			else{
				allPossibleLeft= getAllByType(valueLeft, typeLeft,  _queryTree);
			}
			
			//get all right
			vector<vector<string>> allPossibleRight;
			if(typeRight == "_"){
				allPossibleRight= getAllByType(valueRight, "stmt",  _queryTree);
			}
			else{
				allPossibleRight= getAllByType(valueRight, typeRight,  _queryTree);
			}

			bool resultFound= false;
			if(valueLeft==valueRight && valueLeft!="_" && valueRight!="_"){
				for(int i=0; i<allPossibleLeft.size(); i++){
					int intValue = atoi(allPossibleLeft.at(i).at(0).c_str() );
					if(follows->isFollows(intValue, intValue)){
						resultFound = true;
						break;
					}				
				}
			}
			else{
				for(int i=0; i<allPossibleLeft.size(); i++){
					int intValueLeft = atoi(allPossibleLeft.at(i).at(0).c_str() );
					for(int j=0; j<allPossibleRight.size(); j++){
						int intValueRight = atoi( allPossibleRight.at(j).at(0).c_str() );
						if(follows->isFollows(intValueLeft, intValueRight)){
							results = _possibleResults;
							resultFound = true;
							break;
						}
					}
					if(resultFound) break;
				}
			}


		}
		return results;
	} 
}

//follows*()
vector<vector<string>> evaluator::evaluateFollowsStar(vector<vector<string>> _possibleResults ,queryTree* _queryTree){
	vector<string> suchThatQuery = _queryTree->getSuchThatQuery(0);

	string typeLeft = suchThatQuery.at(2);
	string typeRight = suchThatQuery.at(4);
	string valueLeft = suchThatQuery.at(1);
	string valueRight = suchThatQuery.at(3);
	string select = _queryTree->getSelect();
	string selectType = _queryTree->getSelectType();
	vector<vector<string>> results;

	if(valueLeft==select && valueRight==select){
		//vector<vector<string>> allPossibleByType= getAllByType(selectType);	
		for(int i=0; i<_possibleResults.size(); i++){
			int value = atoi( _possibleResults.at(i).at(0).c_str() );
			if(follows->isFollowsStar(value, value)){
				results.push_back(_possibleResults.at(i));
			}
		}
		return results;
	} 
	//select(s1, not_s1), s1 == select
	else if(valueLeft==select && valueRight!=select){
		//select(s2, "1")
		if(typeRight=="Integer"){
			int intValueRight = atoi(valueRight.c_str() );
			for(int i=0; i<_possibleResults.size(); i++){
				int value = atoi( _possibleResults.at(i).at(0).c_str() );
				if(follows->isFollowsStar(value, intValueRight)){
					results.push_back(_possibleResults.at(i));
				}
			}
		}
		//selects(s1,a1)
		else{
			vector<vector<string>> allPossibleRight;
			if(typeRight == "_"){
				allPossibleRight= getAllByType(valueRight, "stmt",  _queryTree);
			}
			else{
				allPossibleRight= getAllByType(valueRight, typeRight,  _queryTree);
			}

			for(int i=0; i<_possibleResults.size(); i++){
				int value = atoi( _possibleResults.at(i).at(0).c_str() );
				for(int j=0; j<allPossibleRight.size(); j++){
					int intValueRight = atoi( allPossibleRight.at(j).at(0).c_str() );
					if(follows->isFollowsStar(value, intValueRight)){
						results.push_back(_possibleResults.at(i));
						break;
					}
				}
			}
		}
		return results;
	} 
	//select(not_s1, s1), s1 == select
	else if(valueLeft!=select && valueRight==select){
		//select("1",s1)
		if(typeLeft=="Integer"){
			int intValueLeft = atoi(valueLeft.c_str() );
			for(int i=0; i<_possibleResults.size(); i++){
				int value = atoi( _possibleResults.at(i).at(0).c_str() );
				if(follows->isFollowsStar(intValueLeft, value)){
					results.push_back(_possibleResults.at(i));
				}
			}
		}
		//selects(a1, s1)
		else{
			vector<vector<string>> allPossibleLeft;
			if(typeLeft == "_"){
				allPossibleLeft= getAllByType(valueLeft, "stmt",  _queryTree);
			}
			else{
				allPossibleLeft= getAllByType(valueLeft, typeLeft,  _queryTree);
			}

			for(int i=0; i<_possibleResults.size(); i++){
				int value = atoi( _possibleResults.at(i).at(0).c_str() );
				for(int j=0; j<allPossibleLeft.size(); j++){
					int intValueLeft = atoi( allPossibleLeft.at(j).at(0).c_str() );
					if(follows->isFollowsStar(intValueLeft, value)){
						results.push_back(_possibleResults.at(i));
						break;
					}
				}
			}
		}
		return results;
	} 
	//select(not s1, not s1)
	else if(valueLeft!=select && valueLeft!=select){
		//select("1", "1")
		if(typeLeft=="Integer" && typeRight=="Integer"){
			int intValueLeft = atoi( valueLeft.c_str() );
			int intValueRight = atoi( valueRight.c_str() );
			if(follows->isFollowsStar(intValueLeft, intValueRight)){
				results = _possibleResults;
			}
		}
		//select("1", s2)
		else if (typeLeft=="Integer" && typeRight!="Integer"){
			int intValueLeft = atoi(valueLeft.c_str() );

			vector<vector<string>> allPossibleRight;
			if(typeRight == "_"){
				allPossibleRight= getAllByType(valueRight, "stmt",  _queryTree);
			}
			else{
				allPossibleRight= getAllByType(valueRight, typeRight,  _queryTree);
			}

			for(int i=0; i<allPossibleRight.size(); i++){
				int intValueRight = atoi( allPossibleRight.at(i).at(0).c_str() );
				if(follows->isFollowsStar(intValueLeft, intValueRight)){
					results = _possibleResults;
					break;
				}
			}
		}
		//select(s2, "1")
		else if (typeLeft!="Integer" && typeRight=="Integer"){
			int intValueRight = atoi(valueRight.c_str() );
			
			vector<vector<string>> allPossibleLeft;
			if(typeLeft == "_"){
				allPossibleLeft= getAllByType(valueLeft, "stmt",  _queryTree);
			}
			else{
				allPossibleLeft= getAllByType(valueLeft, typeRight,  _queryTree);
			}

			for(int i=0; i<allPossibleLeft.size(); i++){
				int intValueLeft = atoi( allPossibleLeft.at(i).at(0).c_str() );
				if(follows->isFollowsStar(intValueLeft, intValueRight)){
					results = _possibleResults;
					break;
				}
			}
		}
		//select(s2, "1")
		else if (typeLeft!="Integer" && typeRight!="Integer"){
			vector<vector<string>> allPossibleLeft;
			if(typeLeft == "_"){
				allPossibleLeft= getAllByType(valueLeft, "stmt",  _queryTree);
			}
			else{
				allPossibleLeft= getAllByType(valueLeft, typeLeft,  _queryTree);
			}
			
			vector<vector<string>> allPossibleRight;
			if(typeRight == "_"){
				allPossibleRight= getAllByType(valueRight, "stmt",  _queryTree);
			}
			else{
				allPossibleRight= getAllByType(valueRight, typeRight,  _queryTree);
			}

			bool resultFound= false;

			if(valueLeft==valueRight && valueLeft!="_" && valueRight!="_"){
				for(int i=0; i<allPossibleLeft.size(); i++){
					int intValue = atoi(allPossibleLeft.at(i).at(0).c_str() );
					if(follows->isFollowsStar(intValue, intValue)){
						resultFound = true;
						break;
					}				
				}
			}
			else{
				for(int i=0; i<allPossibleLeft.size(); i++){
					int intValueLeft = atoi(allPossibleLeft.at(i).at(0).c_str() );
					for(int j=0; j<allPossibleRight.size(); j++){
						int intValueRight = atoi( allPossibleRight.at(j).at(0).c_str() );
						if(follows->isFollowsStar(intValueLeft, intValueRight)){
							results = _possibleResults;
							resultFound = true;
							break;
						}
					}
					if(resultFound) break;
				}
			}
		}
		return results;
	} 
}

//Parent()
vector<vector<string>> evaluator::evaluateParent(vector<vector<string>> _possibleResults ,queryTree* _queryTree){
	vector<string> suchThatQuery = _queryTree->getSuchThatQuery(0);

	string typeLeft = suchThatQuery.at(2);
	string typeRight = suchThatQuery.at(4);
	string valueLeft = suchThatQuery.at(1);
	string valueRight = suchThatQuery.at(3);
	string select = _queryTree->getSelect();
	string selectType = _queryTree->getSelectType();
	vector<vector<string>> results;

	if(valueLeft==select && valueRight==select){
		//vector<vector<string>> allPossibleByType= getAllByType(selectType);	
		for(int i=0; i<_possibleResults.size(); i++){
			int value = atoi( _possibleResults.at(i).at(0).c_str() );
			if(parent->isParent(value, value)){
				results.push_back(_possibleResults.at(i));
			}
		}
		return results;
	} 
	//select(s1, not_s1), s1 == select
	else if(valueLeft==select && valueRight!=select){
		//select(s2, "1")
		if(typeRight=="Integer"){
			int intValueRight = atoi(valueRight.c_str() );
			for(int i=0; i<_possibleResults.size(); i++){
				int value = atoi( _possibleResults.at(i).at(0).c_str() );
				if(parent->isParent(value, intValueRight)){
					results.push_back(_possibleResults.at(i));
				}
			}
		}
		//selects(s1,a1)
		else{

			vector<vector<string>> allPossibleRight;
			if(typeRight == "_"){
				allPossibleRight= getAllByType(valueRight, "stmt",  _queryTree);
			}
			else{
				allPossibleRight= getAllByType(valueRight, typeRight,  _queryTree);
			}

			for(int i=0; i<_possibleResults.size(); i++){
				int value = atoi( _possibleResults.at(i).at(0).c_str() );
				for(int j=0; j<allPossibleRight.size(); j++){
					int intValueRight = atoi( allPossibleRight.at(j).at(0).c_str() );
					if(parent->isParent(value, intValueRight)){
						results.push_back(_possibleResults.at(i));
						break;
					}
				}
			}
		}
		return results;
	} 
	//select(not_s1, s1), s1 == select
	else if(valueLeft!=select && valueRight==select){
		//select("1",s1)
		if(typeLeft=="Integer"){
			int intValueLeft = atoi(valueLeft.c_str() );
			for(int i=0; i<_possibleResults.size(); i++){
				int value = atoi( _possibleResults.at(i).at(0).c_str() );
				if(parent->isParent(intValueLeft, value)){
					results.push_back(_possibleResults.at(i));
				}
			}
		}
		//selects(a1, s1)
		else{
			vector<vector<string>> allPossibleLeft;
			if(typeRight == "_"){
				allPossibleLeft= getAllByType(valueLeft, "stmt",  _queryTree);
			}
			else{
				allPossibleLeft= getAllByType(valueLeft, typeLeft,  _queryTree);
			}

			for(int i=0; i<_possibleResults.size(); i++){
				int value = atoi( _possibleResults.at(i).at(0).c_str() );
				for(int j=0; j<allPossibleLeft.size(); j++){
					int intValueLeft = atoi( allPossibleLeft.at(j).at(0).c_str() );
					if(parent->isParent(intValueLeft, value)){
						results.push_back(_possibleResults.at(i));
						break;
					}
				}
			}
		}
		return results;
	} 
	//select(not s1, not s1)
	else if(valueLeft!=select && valueLeft!=select){
		//select("1", "1")
		if(typeLeft=="Integer" && typeRight=="Integer"){
			int intValueLeft = atoi( valueLeft.c_str() );
			int intValueRight = atoi( valueRight.c_str() );
			if(parent->isParent(intValueLeft, intValueRight)){
				results = _possibleResults;
			}
		}
		//select("1", s2)
		else if (typeLeft=="Integer" && typeRight!="Integer"){
			int intValueLeft = atoi(valueLeft.c_str() );

			vector<vector<string>> allPossibleRight;
			if(typeRight == "_"){
				allPossibleRight= getAllByType(valueRight, "stmt",  _queryTree);
			}
			else{
				allPossibleRight= getAllByType(valueRight, typeRight,  _queryTree);
			}

			for(int i=0; i<allPossibleRight.size(); i++){
				int intValueRight = atoi( allPossibleRight.at(i).at(0).c_str() );
				if(parent->isParent(intValueLeft, intValueRight)){
					results = _possibleResults;
					break;
				}
			}
		}
		//select(s2, "1")
		else if (typeLeft!="Integer" && typeRight=="Integer"){
			int intValueRight = atoi(valueRight.c_str() );
			vector<vector<string>> allPossibleLeft;

			if(typeLeft == "_"){
				allPossibleLeft= getAllByType(valueLeft, "stmt",  _queryTree);
			}
			else{
				allPossibleLeft= getAllByType(valueLeft, typeLeft,  _queryTree);
			}

			for(int i=0; i<allPossibleLeft.size(); i++){
				int intValueLeft = atoi( allPossibleLeft.at(i).at(0).c_str() );
				if(parent->isParent(intValueLeft, intValueRight)){
					results = _possibleResults;
					break;
				}
			}
		}
		//select(s2, "1")
		else if (typeLeft!="Integer" && typeRight!="Integer"){
			vector<vector<string>> allPossibleLeft;
			if(typeLeft == "_"){
				allPossibleLeft= getAllByType(valueLeft, "stmt",  _queryTree);
			}
			else{
				allPossibleLeft= getAllByType(valueLeft, typeLeft,  _queryTree);
			}
			
			vector<vector<string>> allPossibleRight;
			if(typeRight == "_"){
				allPossibleRight= getAllByType(valueRight, "stmt",  _queryTree);
			}
			else{
				allPossibleRight= getAllByType(valueRight, typeRight,  _queryTree);
			}

			bool resultFound= false;

			if(valueLeft==valueRight && valueLeft!="_" && valueRight!="_"){
				for(int i=0; i<allPossibleLeft.size(); i++){
					int intValue = atoi(allPossibleLeft.at(i).at(0).c_str() );
					if(parent->isParent(intValue, intValue)){
						resultFound = true;
						break;
					}				
				}
			}
			else{
				for(int i=0; i<allPossibleLeft.size(); i++){
					int intValueLeft = atoi(allPossibleLeft.at(i).at(0).c_str() );
					for(int j=0; j<allPossibleRight.size(); j++){
						int intValueRight = atoi( allPossibleRight.at(j).at(0).c_str() );
						if(parent->isParent(intValueLeft, intValueRight)){
							results = _possibleResults;
							resultFound = true;
							break;
						}
					}
					if(resultFound) break;
				}
			}
		}
		return results;
	} 
}

//Parent*()
vector<vector<string>> evaluator::evaluateParentStar(vector<vector<string>> _possibleResults ,queryTree* _queryTree){
	vector<string> suchThatQuery = _queryTree->getSuchThatQuery(0);

	string typeLeft = suchThatQuery.at(2);
	string typeRight = suchThatQuery.at(4);
	string valueLeft = suchThatQuery.at(1);
	string valueRight = suchThatQuery.at(3);
	string select = _queryTree->getSelect();
	string selectType = _queryTree->getSelectType();
	vector<vector<string>> results;

	if(valueLeft==select && valueRight==select){
		//vector<vector<string>> allPossibleByType= getAllByType(selectType);	
		for(int i=0; i<_possibleResults.size(); i++){
			int value = atoi( _possibleResults.at(i).at(0).c_str() );
			if(parent->isParentStar(value, value)){
				results.push_back(_possibleResults.at(i));
				break;
			}
		}
		return results;
	} 
	//select(s1, not_s1), s1 == select
	else if(valueLeft==select && valueRight!=select){
		//select(s2, "1")
		if(typeRight=="Integer"){
			int intValueRight = atoi(valueRight.c_str() );
			for(int i=0; i<_possibleResults.size(); i++){
				int value = atoi( _possibleResults.at(i).at(0).c_str() );
				if(parent->isParentStar(value, intValueRight)){
					results.push_back(_possibleResults.at(i));
				}
			}
		}
		//selects(s1,a1)
		else{
			vector<vector<string>> allPossibleRight;
			if(typeRight == "_"){
				allPossibleRight= getAllByType(valueRight, "stmt",  _queryTree);
			}
			else{
				allPossibleRight= getAllByType(valueRight, typeRight,  _queryTree);
			}
			for(int i=0; i<_possibleResults.size(); i++){
				int value = atoi( _possibleResults.at(i).at(0).c_str() );
				for(int j=0; j<allPossibleRight.size(); j++){
					int intValueRight = atoi( allPossibleRight.at(j).at(0).c_str() );
					if(parent->isParentStar(value, intValueRight)){
						results.push_back(_possibleResults.at(i));
					}
				}
			}
		}
		return results;
	} 
	//select(not_s1, s1), s1 == select
	else if(valueLeft!=select && valueRight==select){
		//select("1",s1)
		if(typeLeft=="Integer"){
			int intValueLeft = atoi(valueLeft.c_str() );
			for(int i=0; i<_possibleResults.size(); i++){
				int value = atoi( _possibleResults.at(i).at(0).c_str() );
				if(parent->isParentStar(intValueLeft, value)){
					results.push_back(_possibleResults.at(i));
				}
			}
		}
		//selects(a1, s1)
		else{
			vector<vector<string>> allPossibleLeft;
			if(typeRight == "_"){
				allPossibleLeft= getAllByType(valueLeft, "stmt",  _queryTree);
			}
			else{
				allPossibleLeft= getAllByType(valueLeft, typeLeft,  _queryTree);
			}

			for(int i=0; i<_possibleResults.size(); i++){
				int value = atoi( _possibleResults.at(i).at(0).c_str() );
				for(int j=0; j<allPossibleLeft.size(); j++){
					int intValueLeft = atoi( allPossibleLeft.at(j).at(0).c_str() );
					if(parent->isParentStar(intValueLeft, value)){
						results.push_back(_possibleResults.at(i));
						break;
					}
				}
			}
		}
		return results;
	} 
	//select(not s1, not s1)
	else if(valueLeft!=select && valueLeft!=select){
		//select("1", "1")
		if(typeLeft=="Integer" && typeRight=="Integer"){
			int intValueLeft = atoi( valueLeft.c_str() );
			int intValueRight = atoi( valueRight.c_str() );
			if(parent->isParentStar(intValueLeft, intValueRight)){
				results = _possibleResults;
			}
		}
		//select("1", s2)
		else if (typeLeft=="Integer" && typeRight!="Integer"){
			int intValueLeft = atoi(valueLeft.c_str() );
			
			vector<vector<string>> allPossibleRight;
			if(typeRight == "_"){
				allPossibleRight= getAllByType(valueRight, "stmt",  _queryTree);
			}
			else{
				allPossibleRight= getAllByType(valueRight, typeRight,  _queryTree);
			}

			for(int i=0; i<allPossibleRight.size(); i++){
				int intValueRight = atoi( allPossibleRight.at(i).at(0).c_str() );
				if(parent->isParentStar(intValueLeft, intValueRight)){
					results = _possibleResults;
					break;
				}
			}
		}
		//select(s2, "1")
		else if (typeLeft!="Integer" && typeRight=="Integer"){
			int intValueRight = atoi(valueRight.c_str() );

			vector<vector<string>> allPossibleLeft;
			if(typeLeft == "_"){
				allPossibleLeft= getAllByType(valueLeft, "stmt",  _queryTree);
			}
			else{
				allPossibleLeft= getAllByType(valueLeft, typeLeft,  _queryTree);
			}

			for(int i=0; i<allPossibleLeft.size(); i++){
				int intValueLeft = atoi( allPossibleLeft.at(i).at(0).c_str() );
				if(parent->isParentStar(intValueLeft, intValueRight)){
					results = _possibleResults;
					break;
				}
			}
		}
		//select(s2, "1")
		else if (typeLeft!="Integer" && typeRight!="Integer"){
			vector<vector<string>> allPossibleLeft;			
			if(typeRight == "_"){
				allPossibleLeft= getAllByType(valueLeft, "stmt",  _queryTree);
			}
			else{
				allPossibleLeft= getAllByType(valueLeft, typeLeft,  _queryTree);
			}

			vector<vector<string>> allPossibleRight;
			if(typeRight == "_"){
				allPossibleRight= getAllByType(valueRight, "stmt",  _queryTree);
			}
			else{
				allPossibleRight= getAllByType(valueRight, typeRight,  _queryTree);
			}
			bool resultFound= false;

			if(valueLeft==valueRight && valueLeft!="_" && valueRight!="_"){
				for(int i=0; i<allPossibleLeft.size(); i++){
					int intValue = atoi(allPossibleLeft.at(i).at(0).c_str() );
					if(parent->isParentStar(intValue, intValue)){
						resultFound = true;
						break;
					}				
				}
			}
			else{
				for(int i=0; i<allPossibleLeft.size(); i++){
					int intValueLeft = atoi(allPossibleLeft.at(i).at(0).c_str() );
					for(int j=0; j<allPossibleRight.size(); j++){
						int intValueRight = atoi( allPossibleRight.at(j).at(0).c_str() );
						if(parent->isParentStar(intValueLeft, intValueRight)){
							results = _possibleResults;
							resultFound = true;
							break;
						}
					}
					if(resultFound) break;
				}
			}
		}
		return results;
	} 
}

//Uses()
vector<vector<string>> evaluator::evaluateUses(vector<vector<string>> _possibleResults ,queryTree* _queryTree){
	vector<string> suchThatQuery = _queryTree->getSuchThatQuery(0);

	string typeLeft = suchThatQuery.at(2);
	string typeRight = suchThatQuery.at(4);
	string valueLeft = suchThatQuery.at(1);
	string valueRight = suchThatQuery.at(3);
	string select = _queryTree->getSelect();
	string selectType = _queryTree->getSelectType();
	vector<vector<string>> results;

	//select(s1, not_s1), s1 == select. right side not select
	if(valueLeft==select && valueRight!=select){
		//select(s2, "1")
		if(typeRight=="Ident"){
			for(int i=0; i<_possibleResults.size(); i++){
				int value = atoi( _possibleResults.at(i).at(0).c_str() );
				if(uses->isUses(value, valueRight)){
					results.push_back(_possibleResults.at(i));
				}
			}
		}
		//selects(s1,a1)
		else{
			//right value could only be v, or _
			vector<vector<string>> allPossibleRight = getAllByType(valueRight, "variable", _queryTree);

			for(int i=0; i<_possibleResults.size(); i++){
				int value = atoi( _possibleResults.at(i).at(0).c_str() );
				for(int j=0; j<allPossibleRight.size(); j++){
					if(uses->isUses(value, allPossibleRight.at(j).at(0))){
						results.push_back(_possibleResults.at(i));
						break;
					}
				}
			}
		}
		return results;
	} 
	//select(not_s1, s1), s1 == select
	else if(valueLeft!=select && valueRight==select){
		//select("1",s1)
		if(typeLeft=="Integer"){
			int intValueLeft = atoi(valueLeft.c_str() );
			for(int i=0; i<_possibleResults.size(); i++){
				if(uses->isUses(intValueLeft, _possibleResults.at(i).at(0))){
					results.push_back(_possibleResults.at(i));
				}
			}
		}
		//selects(a1, v1)
		else{
			vector<vector<string>> allPossibleLeft;
			if(typeLeft == "_"){
				allPossibleLeft= getAllByType(valueLeft, "stmt",  _queryTree);
			}
			else{
				allPossibleLeft= getAllByType(valueLeft, typeLeft,  _queryTree);
			}

			for(int i=0; i<_possibleResults.size(); i++){
				string value = _possibleResults.at(i).at(0);
				for(int j=0; j<allPossibleLeft.size(); j++){
					int intValueLeft = atoi( allPossibleLeft.at(j).at(0).c_str() );
					if(uses->isUses(intValueLeft, value)){
						results.push_back(_possibleResults.at(i));
						break;
					}
				}
			}
		}
		return results;
	} 
	//select(not s1, not s1)////////////////////////////////////////////////////////////////////
	else if(valueLeft!=select && valueLeft!=select){
		//select("1", "1")
		if(typeLeft=="Integer" && typeRight=="Ident"){
			int intValueLeft = atoi( valueLeft.c_str() );
			if(uses->isUses(intValueLeft, valueRight)){
				results = _possibleResults;
			}
		}
		//select("1", s2)
		else if (typeLeft=="Integer" && typeRight!="Ident"){
			int intValueLeft = atoi(valueLeft.c_str() );
			
			vector<vector<string>> 	allPossibleRight= getAllByType(valueRight, "variable",  _queryTree);
			
			for(int i=0; i<allPossibleRight.size(); i++){
				string intValueRight = allPossibleRight.at(i).at(0);
				if(uses->isUses(intValueLeft, intValueRight)){
					results = _possibleResults;
					break;
				}
			}
		}
		//select(s2, "1")
		else if (typeLeft!="Integer" && typeRight=="Ident"){
		
			vector<vector<string>> allPossibleLeft;
			if(typeLeft == "_"){
				allPossibleLeft= getAllByType(valueLeft, "stmt",  _queryTree);
			}
			else{
				allPossibleLeft= getAllByType(valueLeft, typeLeft,  _queryTree);
			}

			for(int i=0; i<allPossibleLeft.size(); i++){
				int intValueLeft = atoi( allPossibleLeft.at(i).at(0).c_str() );
				if(uses->isUses(intValueLeft, valueRight)){
					results = _possibleResults;
					break;
				}
			}
		}
		//select(s2, "1")
		else if (typeLeft!="Integer" && typeRight!="Ident"){
			vector<vector<string>> allPossibleLeft;			
			if(typeLeft == "_"){
				allPossibleLeft= getAllByType(valueLeft, "stmt",  _queryTree);
			}
			else{
				allPossibleLeft= getAllByType(valueLeft, typeLeft,  _queryTree);
			}

			vector<vector<string>> allPossibleRight= getAllByType(valueRight, "variable",  _queryTree);
			
			bool resultFound= false;

			for(int i=0; i<allPossibleLeft.size(); i++){
				int intValueLeft = atoi(allPossibleLeft.at(i).at(0).c_str() );
				for(int j=0; j<allPossibleRight.size(); j++){
					string intValueRight = allPossibleRight.at(j).at(0);
					if(uses->isUses(intValueLeft, intValueRight)){
						results = _possibleResults;
						resultFound = true;
						break;
					} 
				}
				if(resultFound) break;
			}
		}
		return results;
	} 
}

vector<vector<string>> evaluator::evaluateModifies(vector<vector<string>> _possibleResults ,queryTree* _queryTree){
	vector<string> suchThatQuery = _queryTree->getSuchThatQuery(0);

	string typeLeft = suchThatQuery.at(2);
	string typeRight = suchThatQuery.at(4);
	string valueLeft = suchThatQuery.at(1);
	string valueRight = suchThatQuery.at(3);
	string select = _queryTree->getSelect();
	string selectType = _queryTree->getSelectType();
	vector<vector<string>> results;

	//select(s1, not_s1), s1 == select. right side not select
	if(valueLeft==select && valueRight!=select){
		//select(s2, "1")
		if(typeRight=="Ident"){
			for(int i=0; i<_possibleResults.size(); i++){
				int value = atoi( _possibleResults.at(i).at(0).c_str() );
				if(modifies->isModifies(value, valueRight)){
					results.push_back(_possibleResults.at(i));
				}
			}
		}
		//selects(s1,a1)
		else{
			//right value could only be v, or _
			vector<vector<string>> allPossibleRight = getAllByType(valueRight, "variable", _queryTree);

			for(int i=0; i<_possibleResults.size(); i++){
				int value = atoi( _possibleResults.at(i).at(0).c_str() );
				for(int j=0; j<allPossibleRight.size(); j++){
					if(modifies->isModifies(value, allPossibleRight.at(j).at(0))){
						results.push_back(_possibleResults.at(i));
						break;
					}
				}
			}
		}
		return results;
	} 
	//select(not_s1, s1), s1 == select
	else if(valueLeft!=select && valueRight==select){
		//select("1",s1)
		if(typeLeft=="Integer"){
			int intValueLeft = atoi(valueLeft.c_str() );
			for(int i=0; i<_possibleResults.size(); i++){
				if(modifies->isModifies(intValueLeft, _possibleResults.at(i).at(0))){
					results.push_back(_possibleResults.at(i));
				}
			}
		}
		//selects(a1, v1)
		else{
			vector<vector<string>> allPossibleLeft;
			if(typeLeft == "_"){
				allPossibleLeft= getAllByType(valueLeft, "stmt",  _queryTree);
			}
			else{
				allPossibleLeft= getAllByType(valueLeft, typeLeft,  _queryTree);
			}

			for(int i=0; i<_possibleResults.size(); i++){
				string value = _possibleResults.at(i).at(0);
				for(int j=0; j<allPossibleLeft.size(); j++){
					int intValueLeft = atoi( allPossibleLeft.at(j).at(0).c_str() );
					if(modifies->isModifies(intValueLeft, value)){
						results.push_back(_possibleResults.at(i));
						break;
					}
				}
			}
		}
		return results;
	} 
	//select(not s1, not s1)////////////////////////////////////////////////////////////////////
	else if(valueLeft!=select && valueLeft!=select){
		//select("1", "1")
		if(typeLeft=="Integer" && typeRight=="Ident"){
			int intValueLeft = atoi( valueLeft.c_str() );
			if(modifies->isModifies(intValueLeft, valueRight)){
				results = _possibleResults;
			}
		}
		//select("1", s2)
		else if (typeLeft=="Integer" && typeRight!="Ident"){
			int intValueLeft = atoi(valueLeft.c_str() );
			
			vector<vector<string>> 	allPossibleRight= getAllByType(valueRight, "variable",  _queryTree);
			
			for(int i=0; i<allPossibleRight.size(); i++){
				string intValueRight = allPossibleRight.at(i).at(0);
				if(modifies->isModifies(intValueLeft, intValueRight)){
					results = _possibleResults;
					break;
				}
			}
		}
		//select(s2, "1")
		else if (typeLeft!="Integer" && typeRight=="Ident"){
		
			vector<vector<string>> allPossibleLeft;
			if(typeLeft == "_"){
				allPossibleLeft= getAllByType(valueLeft, "stmt",  _queryTree);
			}
			else{
				allPossibleLeft= getAllByType(valueLeft, typeLeft,  _queryTree);
			}

			for(int i=0; i<allPossibleLeft.size(); i++){
				int intValueLeft = atoi( allPossibleLeft.at(i).at(0).c_str() );
				if(modifies->isModifies(intValueLeft, valueRight)){
					results = _possibleResults;
					break;
				}
			}
		}
		//select(s2, "1")
		else if (typeLeft!="Integer" && typeRight!="Ident"){
			vector<vector<string>> allPossibleLeft;			
			if(typeLeft == "_"){
				allPossibleLeft= getAllByType(valueLeft, "stmt",  _queryTree);
			}
			else{
				allPossibleLeft= getAllByType(valueLeft, typeLeft,  _queryTree);
			}

			vector<vector<string>> allPossibleRight= getAllByType(valueRight, "variable",  _queryTree);
			
			bool resultFound= false;

			for(int i=0; i<allPossibleLeft.size(); i++){
				int intValueLeft = atoi(allPossibleLeft.at(i).at(0).c_str() );
				for(int j=0; j<allPossibleRight.size(); j++){
					string intValueRight = allPossibleRight.at(j).at(0);
					if(modifies->isModifies(intValueLeft, intValueRight)){
						results = _possibleResults;
						resultFound = true;
						break;
					} 
				}
				if(resultFound) break;
			}
		}
		return results;
	} 
}

vector<vector<string>> convertToStringVectorResults(vector<int> _intResults, string _type){
	vector<vector<string>> result;
	for(int i=0; i<_intResults.size(); i++){	
		string stringResult = std::to_string(static_cast<long long>( _intResults.at(i)));
		vector<string> tempStringResult;
		tempStringResult.push_back(stringResult);
		tempStringResult.push_back(_type);
		result.push_back(tempStringResult);
	}
	return result;
}

vector<vector<string>> evaluator::pattern(vector<vector<string>> _results ,queryTree* _queryTree){
	vector<string> suchThatQuery = _queryTree->getPatternQuery(0);

	string typeLeft = suchThatQuery.at(2);
	string typeRight = suchThatQuery.at(4);
	string valueLeft = suchThatQuery.at(1);
	string valueRight = suchThatQuery.at(3);
	string select = _queryTree->getSelect();
	string selectType = _queryTree->getSelectType();
	vector<vector<string>> results;
	
	if(selectType=="variable"){
		return getAllByType(select, "variable", _queryTree);
	}
	else if(selectType=="stmt" || selectType=="assign"){
		return getAllByType(select, "assign", _queryTree);
	}
	return results;

}

//--------------checks stmt has pattern-----------------------/
bool evaluator::stmtHasPattern(int stmtNum, queryTree* _queryTree){
	vector<string> patternTree = _queryTree->getPatternQuery(0);
	vector<string> allArg1;
	vector<string> allArg2;
	bool checkUses = false;
	bool checkModifies = false;

	//left
	if(patternTree[2] == "_" || patternTree[2] == "variable"){
		allArg1 = varTable->getAllVar();
	}
	else if(patternTree[2] == "Ident"){
		allArg1.push_back(patternTree[1]);
	}

	//right
	
	if(patternTree[4] == "_"){
		allArg2 = varTable->getAllVar();
	}
	else if(patternTree[4] == "Var_name"){
		allArg2.push_back(patternTree[3]);
	}

	//check modifies
	for(int i=0; i<allArg1.size(); i++){
		if(modifies->isModifies(stmtNum, allArg1.at(i))){
			
			for(int j=0; j<allArg2.size(); j++){
				if(patternTree[4] == "_"){
					checkUses = true;
					break;
				}
				else if(uses->isUses(stmtNum, allArg2.at(j))){
					checkUses = true;
					break;
				}
			}
			if(checkUses) return true;
			
		}
	}

	return false;
}

//---------------checks if variable has pattern------------------/
bool evaluator::varHasPattern(string _varDeclare, string _var, queryTree* _queryTree){
	vector<string> patternTree = _queryTree->getPatternQuery(0);
	vector<int> allAssign = ast->getAllStmtNumByType("assignNode");
	
	if(patternTree.at(1)==_varDeclare && patternTree.at(3)==_varDeclare){
		for(int i=0; i<allAssign.size(); i++){
			int stmtNum = allAssign.at(i);
			if(uses->isUses(stmtNum, _var) && modifies->isModifies(stmtNum, _var))
				return true;
		}
	}
	else if(patternTree.at(1)==_varDeclare && patternTree.at(3)!=_varDeclare){
		for(int i=0; i<allAssign.size(); i++){
			int stmtNum = allAssign.at(i);
			if(modifies->isModifies(stmtNum, _var))
				return true;
		}
	}
	else if(patternTree.at(1)==_varDeclare && patternTree.at(3)==_varDeclare){
		for(int i=0; i<allAssign.size(); i++){
			int stmtNum = allAssign.at(i);
			if(uses->isUses(stmtNum, _var))
				return true;
		}
	}
	else if(patternTree.at(1)==_varDeclare && patternTree.at(3)==_varDeclare){
		for(int i=0; i<allAssign.size(); i++){
		int stmtNum = allAssign.at(i);
		if(uses->isUses(stmtNum, _var) || modifies->isModifies(stmtNum, _var))
			return true;
		}
	}
	return false;
}

//--------------returns string value, based on type-------------------/
vector<vector<string>> evaluator::getAllByType(string _select, string _selectType, queryTree* _queryTree){
	int patternSize = _queryTree->getPatternQuerySize();

	vector<vector<string>> result;
	string nodeType;
	if(_selectType == "assign"){
		nodeType = "assignNode";
		vector<int> getAll = ast->getAllStmtNumByType(nodeType);
		 
		//no pattern
		if(patternSize == 0){
			return convertToStringVectorResults(getAll, _selectType);
		}
		//check if assign statement has pattern
		else{
			vector<string> patternTree = _queryTree->getPatternQuery(0);
			//patter s1(_,_) and select s1
			if(_select == patternTree.at(0)){
				vector<int> tempResults;
				vector<vector<string>> resultWithPattern;
			
				for(int i=0; i<getAll.size(); i++){
					if(stmtHasPattern(getAll.at(i),_queryTree)){
						tempResults.push_back(getAll.at(i));
					}
				}
				return convertToStringVectorResults(tempResults, _selectType);		
			}
			//patter not_s1(_,_) and select s1, return all possible s1 as long as pattern true
			else{
				vector<vector<string>> tempResults;
				for(int i=0; i<getAll.size(); i++){
					if(stmtHasPattern(getAll.at(i),_queryTree)){
						tempResults = convertToStringVectorResults(getAll, _selectType);
						break;
					}
				}
				return tempResults;
			}		
		}

	}
	else if(_selectType == "stmt"){
		vector<int> getAll = ast->getAllStmtNumByType("assignNode");
		vector<int> getAll1 = ast->getAllStmtNumByType("whileNode");
		getAll.insert(getAll.end(), getAll1.begin(), getAll1.end());
		//no pattern
		if(patternSize == 0){		
			return convertToStringVectorResults(getAll, _selectType);
		}
		//check if assign statement has pattern
		else{
			vector<string> patternTree = _queryTree->getPatternQuery(0);
			//patter s1(_,_) and select s1
			if(_select == patternTree.at(0)){
				vector<int> tempResults;
				vector<vector<string>> resultWithPattern;
			
				for(int i=0; i<getAll.size(); i++){
					if(stmtHasPattern(getAll.at(i),_queryTree)){
						tempResults.push_back(getAll.at(i));
					}
				}
				return convertToStringVectorResults(tempResults, _selectType);		
			}
			//patter not_s1(_,_) and select s1, return all possible s1 as long as pattern true
			else{
				vector<vector<string>> tempResults;
				for(int i=0; i<getAll.size(); i++){
					if(stmtHasPattern(getAll.at(i),_queryTree)){
						tempResults = convertToStringVectorResults(getAll, _selectType);
						break;
					}
				}
				return tempResults;
			}		
		}
	}
	else if(_selectType == "variable"){
		nodeType = "varNode";
		vector<vector<string>> varResult;
		vector<string> getAll = varTable->getAllVar();
		vector<int> getAllAssign = ast->getAllStmtNumByType("assignNode");
		//there is pattern, checks if var exist in pattern
		
		if(patternSize!=0){
			vector<string> patternTree = _queryTree->getPatternQuery(0);
			if(patternTree.at(2)=="Ident" && patternTree.at(4)=="Var_name"){
				for(int i=0; i<getAllAssign.size(); i++){
					if(modifies->isModifies(getAllAssign.at(i), patternTree.at(1))){
						for(int j=0; j<getAll.size(); j++){
							vector<string> tempR;
							tempR.push_back(getAll.at(j));
							tempR.push_back("variable");
							varResult.push_back(tempR);
						}
						return varResult;
					}			
				}
			}
			
			else if(patternTree.at(2)!="Ident" && patternTree.at(4)=="Var_name"){
				
				if(patternTree.at(1) == _select){
					for(int j=0; j<getAll.size(); j++){
						for(int i=0; i<getAllAssign.size(); i++){
							if(uses->isUses(getAllAssign.at(i), patternTree.at(3))){
								if(modifies->isModifies(getAllAssign.at(i),getAll.at(j))){
									vector<string> tempR;
									tempR.push_back(getAll.at(j));
									tempR.push_back("variable");
									varResult.push_back(tempR);
									break;					
								}
							}
						}
					}
					
					return varResult;			
				}
				//else if _ or s2(,) is true, return all variable 
				else{

					for(int j=0; j<getAll.size(); j++){
						for(int i=0; i<getAllAssign.size(); i++){
							if(uses->isUses(getAllAssign.at(i), patternTree.at(3))){
								if(modifies->isModifies(getAllAssign.at(i),getAll.at(j))){
									for(int k=0; k<getAll.size(); k++){
										vector<string> tempR;
										tempR.push_back(getAll.at(k));
										tempR.push_back("variable");
										varResult.push_back(tempR);
									}
									return varResult;
								}
							}
						}
					}
				}
			}
			else if(patternTree.at(2)=="Ident" && patternTree.at(4)!="Var_name"){
				if(patternTree.at(3) == _select){

					for(int j=0; j<getAll.size(); j++){
						for(int i=0; i<getAllAssign.size(); i++){
							if(modifies->isModifies(getAllAssign.at(i), patternTree.at(1))){
								if(uses->isUses(getAllAssign.at(i),getAll.at(j))){
									vector<string> tempR;
									tempR.push_back(getAll.at(j));
									tempR.push_back("variable");
									varResult.push_back(tempR);
									break;
								}
							}

						}
					}

					return varResult;			
				}
				//else if _ or s2(,) is true, return all variable 
				else{
					for(int j=0; j<getAll.size(); j++){
						for(int i=0; i<getAllAssign.size(); i++){
							if(modifies->isModifies(getAllAssign.at(i), patternTree.at(1))){
								if(uses->isUses(getAllAssign.at(i),getAll.at(j))){
									for(int k=0; k<getAll.size(); k++){
										vector<string> tempR;
										tempR.push_back(getAll.at(k));
										tempR.push_back("variable");
										varResult.push_back(tempR);
									}
									return varResult;
								}
							}
						}
					}				
				}

			}
			else if(patternTree.at(2)!="Ident" && patternTree.at(4)!="Var_name"){
				if(patternTree.at(1) == _select && patternTree.at(3) == _select){
					for(int j=0; j<getAll.size(); j++){	
						for(int i=0; i<getAllAssign.size(); i++){
							if(uses->isUses(getAllAssign.at(i), getAll.at(j)) && modifies->isModifies(getAllAssign.at(i), getAll.at(j))){          
								vector<string> tempR;
								tempR.push_back(getAll.at(j));
								tempR.push_back("variable");
								varResult.push_back(tempR);
								break;
							}
						}
					}
				
				}
				else if(patternTree.at(1) != _select && patternTree.at(3) == _select){
					
					for(int j=0; j<getAll.size(); j++){	
						bool added = false;
						for(int i=0; i<getAll.size(); i++){
							for(int k=0; k<getAllAssign.size(); k++){
								if(uses->isUses(getAllAssign.at(k), getAll.at(j)) && modifies->isModifies(getAllAssign.at(k), getAll.at(i))){
									vector<string> tempR;
									tempR.push_back(getAll.at(j));
									tempR.push_back("variable");
									varResult.push_back(tempR);
									added = true;
									break;
								}						
							}
							if(added) break;						
						}
					}
					return varResult;
				}
				else if(patternTree.at(1) == _select && patternTree.at(3) != _select){
					for(int j=0; j<getAll.size(); j++){	
						bool added = false;
						for(int i=0; i<getAll.size(); i++){
							for(int k=0; k<getAllAssign.size(); k++){
								if(uses->isUses(getAllAssign.at(k), getAll.at(i)) && modifies->isModifies(getAllAssign.at(k), getAll.at(j))){
									vector<string> tempR;
									tempR.push_back(getAll.at(j));
									tempR.push_back("variable");
									varResult.push_back(tempR);
									added = true;
									break;
								}						
							}
							if(added) break;						
						}
					}
					return varResult;
				}
				else if(patternTree.at(1) != _select && patternTree.at(3) != _select){
			
					for(int j=0; j<getAll.size(); j++){	
						for(int i=0; i<getAll.size(); i++){
							for(int k=0; k<getAllAssign.size(); k++){
								if(uses->isUses(getAllAssign.at(k), getAll.at(j)) && modifies->isModifies(getAllAssign.at(k), getAll.at(i))){
									for(int l=0; l<getAll.size(); l++){
										vector<string> tempR;
										tempR.push_back(getAll.at(l));
										tempR.push_back("variable");
										varResult.push_back(tempR);
									}
									return varResult;
								}						
							}					
						}
					}
				}
			}
			return varResult;
		}		
		//else return everthing(no pattern)
		for(int i=0; i<getAll.size(); i++){
			vector<string> temp;
			temp.push_back(getAll.at(i));
			temp.push_back("variable");
			varResult.push_back(temp);
		}
		return varResult;
	}
	else if(_selectType == "constant"){
		vector<vector<string>> returnResults; 
		vector<string> results = ast->getAllConstant();

		for(int i=0; i<results.size(); i++){
			vector<string> tempResults;
			tempResults.push_back(results.at(i));
			tempResults.push_back("constant");
			returnResults.push_back(tempResults);
		}

		return returnResults; 
	}
	else if(_selectType == "while"){
		vector<int> getAllAssign = ast->getAllStmtNumByType("assignNode");
		vector<int> getAllWhile = ast->getAllStmtNumByType("whileNode");
		//no pattern
		if(patternSize == 0){		
			return convertToStringVectorResults(getAllWhile, _selectType);
		}
		//check if assign statement has pattern
		else{
			vector<string> patternTree = _queryTree->getPatternQuery(0);
			//patter s1(_,_) and select s1
			
			vector<int> tempResults;
			
			//checks all assign statment existence in pattern
			for(int i=0; i<getAllAssign.size(); i++){
				if(stmtHasPattern(getAllAssign.at(i),_queryTree)){
					return convertToStringVectorResults(getAllWhile, _selectType);	
				}
			}
						
		}
	}

	return result;
}


